16 Setting the MySQL Replication 

16.1.1.1. Setting the Replication Master Configuration

On a replication master, you must enable binary logging and establish a unique server ID. 
If this has not already been done, this part of master setup requires a server restart.

/etc/my.cnf
[mysqld]
log-bin=mysql-bin
server-id=104100

binlog-do-db = Plus45

16.1.1.2. Setting the Replication Slave Configuration

/etc/my.cnf
[mysqld]
log-bin=mysql-bin
server-id=2000

16.1.1.3. Creating a User for Replication

on MASTER server:

mysql> CREATE USER 'rep_user'@'%.int.interactivemedia.com' IDENTIFIED BY '63vette';
mysql> GRANT REPLICATION SLAVE ON *.* TO 'rep_user'@'%.int.interactivemedia.com';

on master w151dbp10_4100
mysql> CREATE USER 'rep_user'@'10.50.4.30' IDENTIFIED BY '63vette';
mysql> GRANT REPLICATION SLAVE ON *.* TO 'rep_user'@'10.50.4.30';

on master w151dbp10_4100
mysql> CREATE USER 'rep_user'@'10.50.4.20' IDENTIFIED BY '63vette';
mysql> GRANT REPLICATION SLAVE ON *.* TO 'rep_user'@'10.50.4.20';

on MASTER w151dbp10_4100
mysql> CREATE USER 'rep_user'@'10.10.96.221' IDENTIFIED BY '63vette';
mysql> GRANT REPLICATION SLAVE ON *.* TO 'rep_user'@'10.10.96.221';

on MASTER V151DBP04_7100
mysql> CREATE USER 'rep_user'@'10.10.26.40' IDENTIFIED BY '63vette';
mysql> GRANT REPLICATION SLAVE ON *.* TO 'rep_user'@'10.10.26.40';

16.1.1.4. Obtaining the Replication Master Binary Log Coordinates

  To configure replication on the slave you must determine the master's current coordinates within its binary log. 

  To obtain the master binary log coordinates, follow these steps:

1.  on the MASTER server, Start a session  by connecting to it with the command-line client, and flush all tables and block write statements by executing the FLUSH TABLES WITH READ LOCK statement:

  mysql> FLUSH TABLES WITH READ LOCK;

2.  In a different session on the master, use the SHOW MASTER STATUS statement to determine the current binary log file name and position:

mysql > SHOW MASTER STATUS;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000003 | 73       | test         | manual,mysql     |
+------------------+----------+--------------+------------------+
  The File column shows the name of the log file and Position shows the position within the file. In this example, the binary log file is mysql-bin.000003 and the position is 73. Record these values. You need them later when you are setting up the slave. They represent the replication coordinates at which the slave should begin processing new updates from the master.

  If the master has been running previously without binary logging enabled, the log file name and position values displayed by SHOW MASTER STATUS or mysqldump --master-data will be empty. In that case, the values that you need to use later when specifying the slave's log file and position are the empty string ('') and 4.

  You now have the information you need to enable the slave to start reading from the binary log in the correct place to start replication.

  If you have existing data that needs be to synchronized with the slave before you start replication, leave the client running so that the lock remains in place and then proceed to Section 16.1.1.5, “Creating a Data Snapshot Using mysqldump”, or Section 16.1.1.6, “Creating a Data Snapshot Using Raw Data Files”. The idea here is to prevent any further changes so that the data copied to the slaves is in synchrony with the master.

16.1.1.5. Creating a Data Snapshot Using mysqldump
One way to create a snapshot of the data in an existing master database is to use the mysqldump tool. Once the data dump has been completed, you then import this data into the slave before starting the replication process.

To obtain a snapshot of the data using mysqldump:

If you have not already locked the tables on the server to prevent statements that update data from executing:

Start a session on the server by connecting to it with the command-line client, and flush all tables and block write statements by executing the FLUSH TABLES WITH READ LOCK statement:

mysql> FLUSH TABLES WITH READ LOCK;
Remember to use SHOW MASTER STATUS and record the binary log details for use when starting up the slave. The point in time of your snapshot and the binary log position must match. See Section 16.1.1.4, “Obtaining the Replication Master Binary Log Coordinates”.

In another session, use mysqldump to create a dump either of all the databases you want to replicate, or of selected individual databases. For example:

shell> mysqldump -h127.0.0.1 -P4100 --all-databases --lock-all-tables >w151dbp10_4100.dump;


An alternative to using a bare dump, is to use the --master-data option, which automatically appends the CHANGE MASTER TO statement required on the slave to start the replication process.

shell> mysqldump --all-databases --master-data >dbdump.db
In the client where you acquired the read lock, release the lock:

mysql> UNLOCK TABLES;
Alternatively, exit the first session to release the read lock.


  If you are setting up a brand new master and slave replication group, you can exit the first session to release the read lock.

16.1.1.10.  on the Slave, Setting the Master Configuration
To set up the slave to communicate with the master for replication, you must tell the slave the necessary connection information. To do this, execute the following statement on the slave, replacing the option values with the actual values relevant to your system:

on the slave server,

mysql> CHANGE MASTER TO
    ->     MASTER_HOST='master_host_name',
    ->     MASTER_USER='replication_user_name',
    ->     MASTER_PASSWORD='replication_password',
    ->     MASTER_LOG_FILE='recorded_log_file_name',
    ->     MASTER_LOG_POS=recorded_log_position;

--server1 master, server2 slave

CHANGE MASTER TO
    MASTER_HOST='10.50.4.10',
    MASTER_PORT=4100,
    MASTER_USER='rep_user',
    MASTER_PASSWORD='63vette',
    MASTER_LOG_FILE='w151dbp10_4100-bin.000012',
    MASTER_LOG_POS=501;

--server1 slave, server2 master
CHANGE MASTER TO
    MASTER_HOST='10.50.4.20',
    MASTER_PORT=4100,
    MASTER_USER='rep_user',
    MASTER_PASSWORD='63vette',
    MASTER_LOG_FILE='w151dbp20_4100-bin.000009',
    MASTER_LOG_POS=4405019;

--real slave to '10.50.4.10' 4100 
CHANGE MASTER TO
    MASTER_HOST='10.50.4.10',
    MASTER_PORT=4100,
    MASTER_USER='rep_user',
    MASTER_PASSWORD='63vette',
    MASTER_LOG_FILE='w151dbp10_4100-bin.000012',
    MASTER_LOG_POS=1470;

--START SLAVE;

Note
Replication cannot use Unix socket files. You must be able to connect to the master MySQL server using TCP/IP.

#-------------------------------------------------------
# this one mimic sybase replication server's skip tran
#------------------------------------------------------


3. If you decide that the slave can skip the next statement from the master, issue the following statements:

mysql> SET GLOBAL sql_slave_skip_counter = N;
mysql> START SLAVE;

#-----------------------------------------------
# reset/delete/disable/clear MySQL replication
#-----------------------------------------------
This is a quick article that describes how to reset/delete/disable/clear MySQL replication in master-master or master-slave replication.
For each server that you wish to reset/clear MySQL replication on, do the following:

1. Enter MySQL prompt and run the following commands:
mysql> STOP SLAVE; CHANGE MASTER TO MASTER_HOST=' '; RESET SLAVE;

2. Remove replication user(s). In this example, we remove replication user “replicator”:
 mysql> use mysql;
 mysql> delete from user where User="rep_user";
 mysql> flush privileges;

3. Exit MySQL prompt and open up /etc/my.cnf – remove any reference to replication (eg: replicate-* master-* etc)
# vim /etc/my.cnf

4. Lastly, restart your MySQL instance:
# /etc/init.d/mysqld restart


issue 1:


Scenario Master – Master replication
MasterA is a client facing server
MasterB is a warm standby server (read only)
MasterB restarted abruptly and when instances were braught back up MasterA (it’s slave) was showing the following error:
MasterA has the following error in show slave status:
Last_IO_Errno: 1236
Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: ‘Could not find first log file name in binary log index file’
Solution:
Slave: stop slave;
Master: flush logs
Master: show master status; — take note of the master log file and master log position
Slave: CHANGE MASTER TO MASTER_LOG_FILE=’log-bin.00000X?, MASTER_LOG_POS=106;
Slave: start slave;

 
