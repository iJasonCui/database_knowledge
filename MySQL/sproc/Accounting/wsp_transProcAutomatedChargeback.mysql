DELIMITER ;;
DROP PROCEDURE IF EXISTS  wsp_transProcAutomatedChargeback;
CREATE DEFINER='root'@'10.10.26.21' PROCEDURE wsp_transProcAutomatedChargeback (
/******************************************************************************
**
** CREATION:
**   Author:  Mike Stairs
**   Date:  May 29, 2006
**   Description:  attempt to chargeback purchase if it exists. First check if
**                 refXactionId exists, else check by cardNumber/date
**
**   Author: Andy Tran
**   Date: May 5, 2010
**   Description: add location tax IDs
**
******************************************************************************/
at_userId		  DECIMAL(12,0),
at_xactionId    	  DECIMAL(12,0),
at_creditTypeId  	  TINYINT,
at_xactionTypeId 	  TINYINT,
at_contentId     	  SMALLINT,
at_credits       	  SMALLINT,
at_balance       	  INT,
at_dateNow       	  DATETIME,
at_purchaseTypeId 	  TINYINT,
at_billingLocationId 	  SMALLINT,
at_creditCardId 	  INT,
at_purchaseOfferDetailId  SMALLINT,
at_currencyId 		  TINYINT,
at_cost			  DECIMAL (10,2),
at_costUSD                DECIMAL (5,2),
at_tax                    DECIMAL (10,2),
at_taxUSD                 DECIMAL (5,2),
at_refXactionId           DECIMAL(12,0),
at_taxCountryId           SMALLINT,
at_taxJurisdictionId      INT,
at_partialCardNumber      CHAR(8),
at_cardStatus             CHAR(1),
at_cvvResponseCode        CHAR(1),
at_avsResponseCode        CHAR(1)
)
BEGIN

DECLARE EXIT HANDLER FOR SQLWARNING
BEGIN
   ROLLBACK;
END;

DECLARE	EXIT HANDLER FOR SQLEXCEPTION
BEGIN
   ROLLBACK;
END;

START TRANSACTION;

INSERT INTO AccountTransaction (xactionId, userId, creditTypeId, xactionTypeId, contentId, credits, balance, description, dateCreated)
   VALUES (at_xactionId, at_userId, at_creditTypeId, at_xactionTypeId, at_contentId, - at_credits, at_balance, "AUTOMATED CHARGEBACK", at_dateNow);

INSERT INTO Purchase (xactionId, purchaseTypeId, billingLocationId, purchaseOfferDetailId, currencyId, cost, costUSD, tax, taxUSD, 
                      userId, dateCreated, creditCardId, cardProcessor, xactionTypeId, refXactionId, taxCountryId, taxJurisdictionId)
   VALUES (at_xactionId, at_purchaseTypeId, at_billingLocationId, at_purchaseOfferDetailId, at_currencyId, -at_cost, -at_costUSD, -at_tax, -at_taxUSD,
             at_userId, at_dateNow, at_creditCardId, null, at_xactionTypeId, at_refXactionId, at_taxCountryId, at_taxJurisdictionId);

INSERT INTO AdminAccountTransaction (xactionId, adminUserId, userId, dateCreated)
   VALUES (at_xactionId, 9999, at_userId, at_dateNow);

IF (SELECT 1 FROM CreditBalance WHERE userId = at_userId AND creditTypeId = at_creditTypeId) IS NOT NULL 
THEN
   UPDATE CreditBalance SET credits = credits - at_credits, dateModified = at_dateNow WHERE userId = at_userId AND creditTypeId = at_creditTypeId;
ELSE
   INSERT INTO CreditBalance (userId, creditTypeId, credits, dateExpiry, dateModified, dateCreated)
      VALUES (at_userId, at_creditTypeId, -at_credits, '20521231', at_dateNow, at_dateNow);
END IF;

COMMIT;

SELECT at_userId, at_creditCardId, at_cardStatus, at_partialCardNumber, at_xactionId, at_cvvResponseCode, at_avsResponseCode, at_refXactionId;

/* ### DEFNCOPY: END OF DEFINITION */
END;;
DELIMITER ;
