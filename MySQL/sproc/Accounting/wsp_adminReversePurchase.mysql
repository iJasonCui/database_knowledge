DELIMITER ;;
DROP PROCEDURE IF EXISTS  wsp_adminReversePurchase;
CREATE DEFINER='root'@'10.10.26.21' PROCEDURE wsp_adminReversePurchase (
/******************************************************************************
**
** CREATION:
**   Author:  Mike Stairs
**   Date:  Sept 9, 2003
**   Description:  reverses  purchase for user
**
**
** REVISION(S):
**   Author: Mike Stairs
**   Date: July 7, 2005
**   Description: pass in card processor
**
**   Author: Andy Tran
**   Date: November 15, 2006
**   Description: pass in payment number
**
**   Author: Andy Tran
**   Date: May 5, 2010
**   Description: add location tax IDs
**
******************************************************************************/

at_userId DECIMAL(12,0),
at_xactionId DECIMAL(12,0),
at_refXactionId DECIMAL(12,0),
at_contentId SMALLINT,
at_xactionTypeId TINYINT,
at_cardProcessor CHAR(1),
at_adminUserId INT,
at_adminNote VARCHAR(255),
at_paymentNumber VARCHAR(40)
)
proc_label:BEGIN

DECLARE at_credits                       SMALLINT;
DECLARE at_creditTypeId                  TINYINT;
DECLARE at_dateNow                       DATETIME;
DECLARE at_balance                       INT;
DECLARE at_cost                          DECIMAL (10,2);
DECLARE at_costUSD                       DECIMAL (5,2);
DECLARE at_tax                           DECIMAL (10,2);
DECLARE at_taxUSD                        DECIMAL (5,2);
DECLARE at_currencyId                    TINYINT;
DECLARE at_purchaseOfferDetailId         SMALLINT;
DECLARE at_purchaseTypeId                TINYINT;
DECLARE at_billingLocationId             SMALLINT;
DECLARE at_creditCardId                  INT;
DECLARE at_taxCountryId                  SMALLINT;
DECLARE at_taxJurisdictionId             INT;

DECLARE EXIT HANDLER FOR SQLWARNING
BEGIN
        ROLLBACK;
END;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
        ROLLBACK;
END;

SET at_dateNow = UTC_TIMESTAMP();
CALL wsp_getTotalCredits (at_userId, at_balance);

SELECT p.cost, p.costUSD, p.tax, p.taxUSD, credits, creditTypeId, creditCardId, currencyId,
       CASE p.purchaseOfferDetailId WHEN null THEN pd.purchaseOfferDetailId ELSE p.purchaseOfferDetailId END,
       billingLocationId, purchaseTypeId, taxCountryId, taxJurisdictionId
     INTO at_cost, at_costUSD, at_tax, at_taxUSD, at_credits, at_creditTypeId, at_creditCardId, at_currencyId, at_purchaseOfferDetailId, 
     	  at_billingLocationId, at_purchaseTypeId, at_taxCountryId, at_taxJurisdictionId 
     FROM AccountTransaction, Purchase p LEFT JOIN PurchaseCreditDetail pd ON p.xactionId = pd.xactionId  
     WHERE AccountTransaction.xactionId=at_refXactionId AND
       AccountTransaction.xactionId=p.xactionId ;

SET at_balance = at_balance - at_credits;

IF at_xactionId = -1 THEN -- if reversal not passed through card processor, generate new xactionId and set cardProcessor = null
   SET at_cardProcessor = NULL;
   CALL wsp_XactionId (at_xactionId);
   IF !(at_xactionId > 0) THEN
      LEAVE proc_label;
   END IF;
END IF;

START TRANSACTION;

INSERT INTO AccountTransaction 
        (   xactionId,
            userId,
            creditTypeId,
            xactionTypeId,
            contentId,
            credits,
            balance,
            description,
            dateCreated
        )
        VALUES 
        (   at_xactionId,
            at_userId,
            at_creditTypeId,
            at_xactionTypeId,
            at_contentId,
            - at_credits,
            at_balance,
            at_adminNote,
            at_dateNow
        );

INSERT INTO Purchase 
            (   xactionId,
                purchaseTypeId,
                billingLocationId,
                purchaseOfferDetailId,
                currencyId,
                cost,
                costUSD,
                tax,
                taxUSD,
                userId,
                dateCreated,
                creditCardId,
                cardProcessor,
                xactionTypeId,
                refXactionId,
                paymentNumber,
                taxCountryId,
                taxJurisdictionId
              )
              VALUES (
                at_xactionId,
                at_purchaseTypeId,
                at_billingLocationId,
                at_purchaseOfferDetailId,
                at_currencyId,
                -at_cost,
                -at_costUSD,
                -at_tax,
                -at_taxUSD,
                at_userId,
                at_dateNow,
                at_creditCardId,
                at_cardProcessor,
                at_xactionTypeId,
                at_refXactionId,
                at_paymentNumber,
                at_taxCountryId,
                at_taxJurisdictionId
              );

INSERT INTO AdminAccountTransaction 
            (   xactionId,
                adminUserId,
		userId,
		dateCreated
            )
            VALUES
            (
                at_xactionId,
                at_adminUserId,
		at_userId,
		at_dateNow
             );

IF (SELECT 1 FROM CreditBalance WHERE userId = at_userId AND creditTypeId = at_creditTypeId) IS NOT NULL THEN 

   UPDATE CreditBalance SET credits = credits - at_credits,
                                dateModified = at_dateNow
                        WHERE userId = at_userId AND creditTypeId = at_creditTypeId;
                            
ELSE
   INSERT INTO CreditBalance
                            (   userId,
                                creditTypeId,
                                credits,
                                dateExpiry,
                                dateModified,
                                dateCreated
                            )
                            VALUES 
                            (   at_userId,
                                at_creditTypeId,
                                -at_credits,
                                '20521231',
                                at_dateNow,
                                at_dateNow
                            );
END IF;

COMMIT;


/* ### DEFNCOPY: END OF DEFINITION */
END;;
DELIMITER ;
