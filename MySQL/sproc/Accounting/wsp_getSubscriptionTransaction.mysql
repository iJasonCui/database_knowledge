DELIMITER ;;
DROP PROCEDURE IF EXISTS  wsp_getSubscriptionTransaction;
CREATE DEFINER='root'@'10.10.26.21' PROCEDURE wsp_getSubscriptionTransaction (
at_userId      DECIMAL(12,0),
at_startDate   DATETIME
)
BEGIN
   DECLARE at_xactionId                 DECIMAL(12, 0);
   DECLARE at_xactionTypeId             TINYINT;
   DECLARE at_contentId                 SMALLINT;
   DECLARE at_subscriptionTypeId        SMALLINT;
   DECLARE at_duration                  SMALLINT;
   DECLARE at_durationUnits             CHAR(1);
   DECLARE at_description               VARCHAR(255);
   DECLARE at_dateCreated               DATETIME; 
   DECLARE at_subscriptionOfferDetailId INT;

   DECLARE at_cost       DECIMAL(10, 2);
   DECLARE at_tax        DECIMAL(10, 2);
   DECLARE at_currencyId TINYINT; 

   DECLARE at_sOfferDetailId INT; 

   DECLARE done INT DEFAULT FALSE;
   DECLARE CUR_subscriptionTrans CURSOR FOR SELECT xactionId,
           xactionTypeId,
           contentId,
           subscriptionTypeId, 
           duration, 
           durationUnits,
           description, 
           dateCreated,
           IFNULL(subscriptionOfferDetailId, 0)
      FROM SubscriptionTransaction
     WHERE userId = at_userId
       AND dateCreated > at_startDate
     ORDER BY dateCreated ASC;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

   OPEN CUR_subscriptionTrans;

   CREATE TEMPORARY TABLE IF NOT EXISTS tmp_subscriptionTrans
   (
      userId             DECIMAL(12, 0) NOT NULL,
      xactionId          DECIMAL(12, 0) NOT NULL,
      xactionTypeId      TINYINT        NOT NULL,
      contentId          SMALLINT       NOT NULL,
      subscriptionTypeId SMALLINT       NOT NULL,
      duration           SMALLINT       NOT NULL,
      durationUnits      CHAR(1)        NULL,
      description        VARCHAR(255)   NULL,
      dateCreated        DATETIME       NOT NULL,
      cost               DECIMAL(10, 2) NULL,
      tax                DECIMAL(10, 2) NULL,
      currencyId         TINYINT        NULL
   ) ENGINE = MEMORY;

   DELETE FROM tmp_subscriptionTrans; 

   read_loop: LOOP
 
      FETCH CUR_subscriptionTrans INTO at_xactionId, 
                                    at_xactionTypeId,
                                    at_contentId,
                                    at_subscriptionTypeId,
                                    at_duration,
                                    at_durationUnits,
                                    at_description,
                                    at_dateCreated,
                                    at_subscriptionOfferDetailId;

      IF done THEN
         LEAVE read_loop;
      END IF;

      IF (SELECT 1 FROM Purchase WHERE xactionId = at_xactionId) IS NOT NULL
      THEN
         SELECT currencyId,cost,tax,IFNULL(subscriptionOfferDetailId, 0) INTO at_currencyId,at_cost,at_tax,at_sOfferDetailId FROM Purchase WHERE xactionId = at_xactionId;
         IF (at_subscriptionOfferDetailId > 0) 
         THEN
            IF (at_sOfferDetailId > 0) 
            THEN
               INSERT INTO tmp_subscriptionTrans(userId,xactionId,xactionTypeId,contentId,subscriptionTypeId,duration,durationUnits,description,dateCreated,cost,tax,currencyId)
                        VALUES(at_userId,at_xactionId,at_xactionTypeId,at_contentId,at_subscriptionTypeId,at_duration,at_durationUnits,at_description,at_dateCreated,at_cost,at_tax,at_currencyId);
            ELSE
               IF (SELECT 1 FROM PurchaseSubscriptionDetail WHERE xactionId = at_xactionId AND subscriptionOfferDetailId = at_subscriptionOfferDetailId) IS NOT NULL 
               THEN
                  SELECT cost, tax INTO at_cost, at_tax FROM PurchaseSubscriptionDetail WHERE xactionId = at_xactionId AND subscriptionOfferDetailId = at_subscriptionOfferDetailId;
		  INSERT INTO tmp_subscriptionTrans(userId,xactionId,xactionTypeId,contentId,subscriptionTypeId,duration,durationUnits,description,dateCreated,cost,tax,currencyId)
                        VALUES(at_userId,at_xactionId,at_xactionTypeId,at_contentId,at_subscriptionTypeId,at_duration,at_durationUnits,at_description,at_dateCreated,at_cost,at_tax,at_currencyId);
               ELSE
                  INSERT INTO tmp_subscriptionTrans(userId,xactionId,xactionTypeId,contentId,subscriptionTypeId,duration,durationUnits,description,dateCreated,cost,tax,currencyId)
		        VALUES(at_userId,at_xactionId,at_xactionTypeId,at_contentId,at_subscriptionTypeId,at_duration,at_durationUnits,at_description,at_dateCreated,NULL,NULL,at_currencyId);
               END IF; 
            END IF;
         ELSE
            INSERT INTO tmp_subscriptionTrans(userId,xactionId,xactionTypeId,contentId,subscriptionTypeId,duration,durationUnits,description,dateCreated,cost,tax,currencyId)
                  VALUES(at_userId,at_xactionId,at_xactionTypeId,at_contentId,at_subscriptionTypeId,at_duration,at_durationUnits,at_description,at_dateCreated,at_cost,at_tax,at_currencyId);
         END IF;
      ELSE
         INSERT INTO tmp_subscriptionTrans(userId,xactionId,xactionTypeId,contentId,subscriptionTypeId,duration,durationUnits,description,dateCreated,cost,tax,currencyId)
               VALUES(at_userId,at_xactionId,at_xactionTypeId,at_contentId,at_subscriptionTypeId,at_duration,at_durationUnits,at_description,at_dateCreated,NULL,NULL,NULL);
      END IF;

   END LOOP;

   CLOSE CUR_subscriptionTrans;

   SELECT userId, 
          xactionId,
          xactionTypeId,
          contentId,    
          subscriptionTypeId,
          duration,
          description,  
          dateCreated,
          -1,   -- cardId
          NULL, -- card nickname
          cost,
          currencyId,
          durationUnits,
          tax
     FROM tmp_subscriptionTrans WHERE userId=at_userId;

/* ### DEFNCOPY: END OF DEFINITION */
END;;
DELIMITER ;
